/**********************************************************************
 * 
 * Update Controls .NET
 * Copyright 2008 Mallard Software Designs
 * Licensed under LGPL
 * 
 * http://updatecontrols.net
 * http://www.codeplex.com/updatecontrols/
 * 
 **********************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using NUnit.Framework;
using UpdateControls.Themes.Inertia;
using UpdateControls;

namespace UpdateControls.Themes.UnitTest
{
    [TestFixture]
    public class InertialPropertyUnitTest
    {
        private float _targetValue;
        private InertialProperty _ip;

        #region Dynamic properties
        // Generated by Update Controls --------------------------------
        private Dynamic _dynTargetValue = new Dynamic();

        public float TargetValue
        {
            get { _dynTargetValue.OnGet(); return _targetValue; }
            set { _dynTargetValue.OnSet(); _targetValue = value; }
        }
        // End generated code --------------------------------
        #endregion

        [SetUp]
        public void SetUp()
        {
            _ip = new InertialProperty(delegate() { return TargetValue; }, delegate() { return true; });
        }

        [Test]
        public void TestInitialize()
        {
            TargetValue = 42.0F;

            Assert.AreEqual(42.0, _ip.Value);
            _ip.OnTimer(50000);
            Assert.AreEqual(42.0, _ip.Value);
        }

        [Test]
        public void TestFromAtRest()
        {
            _ip.OnTimer(50000);
            TargetValue = -1.0F;

            Assert.AreEqual(-1.0, _ip.Value);
            TargetValue = 0.0F;

            // It should take 1 second to move.
            for (long ticks = 50000; ticks < 51000; ticks += 100)
            {
                _ip.OnTimer(ticks);
                float value = _ip.Value;
                Assert.GreaterOrEqual(value, -1.0);
                Assert.Less(value, 0.0);
            }

            _ip.OnTimer(51000);
            Assert.AreEqual(0.0, _ip.Value);
            _ip.OnTimer(52000);
            Assert.AreEqual(0.0, _ip.Value);
        }

        [Test]
        public void TestFromAtRest2()
        {
            _ip.OnTimer(50000);
            TargetValue = 10.0F;

            Assert.AreEqual(10.0, _ip.Value);
            TargetValue = 3.0F;

            // It should take 1 second to move.
            for (long ticks = 50000; ticks < 51000; ticks += 100)
            {
                _ip.OnTimer(ticks);
                float value = _ip.Value;
                Assert.Greater(value, 3.0);
                Assert.LessOrEqual(value, 10.0);
            }

            _ip.OnTimer(51000);
            Assert.AreEqual(3.0, _ip.Value);
            _ip.OnTimer(52000);
            Assert.AreEqual(3.0, _ip.Value);
        }

        [Test]
        public void TestBounce()
        {
            _ip.OnTimer(50000);
            TargetValue = 10.0F;

            Assert.AreEqual(10.0, _ip.Value);
            TargetValue = 80.0F;

            // Move for half a second.
            for (long ticks = 50000; ticks < 50500; ticks += 50)
            {
                _ip.OnTimer(ticks);
                float value = _ip.Value;
                Assert.GreaterOrEqual(value, 10.0);
                Assert.Less(value, 46.0);
            }

            // Reverse directions.
            TargetValue = 20.0F;

            // Move for a second and a half.
            for (long ticks = 50500; ticks < 52000; ticks += 50)
            {
                _ip.OnTimer(ticks);
                float value = _ip.Value;
                Assert.GreaterOrEqual(value, 20.0);
                Assert.LessOrEqual(value, 62.0);
            }

            _ip.OnTimer(52000);
            Assert.AreEqual(20.0, _ip.Value);
            _ip.OnTimer(53000);
            Assert.AreEqual(20.0, _ip.Value);
        }
    }
}
