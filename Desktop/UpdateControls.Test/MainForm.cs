/**********************************************************************
 * 
 * Update Controls .NET
 * Copyright 2010 Michael L Perry
 * MIT License
 * 
 * http://updatecontrols.net
 * http://www.codeplex.com/updatecontrols/
 * 
 **********************************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using UpdateControls;

namespace UpdateControls.Test
{
    public partial class MainForm : Form
    {
        private List<int> _numbers = new List<int>();
        private Brush _brush = new SolidBrush(Color.Black);

        #region Dynamic properties
        // Generated by Update Controls --------------------------------
        private Independent _dynNumbers = new Independent();

        public void MoveNumber(int number, int offset)
        {
            _dynNumbers.OnSet();
            _numbers.Remove(number);
            _numbers.Insert(offset, number);
        }

        public void DeleteNumber(int number)
        {
            _dynNumbers.OnSet();
            _numbers.Remove(number);
        }

        public IEnumerable<int> Numbers
        {
            get { _dynNumbers.OnGet(); return _numbers; }
        }
        // End generated code --------------------------------
        #endregion

        public MainForm()
        {
            InitializeComponent();

            for (int i = 0; i < 10; ++i)
                _numbers.Add(i);
        }

        private bool topRadioButton_GetChecked()
        {
            return themedTabDeck1.Orientation == UpdateControls.Themes.OrientationType.Top;
        }

        private bool leftRadioButton_GetChecked()
        {
            return themedTabDeck1.Orientation == UpdateControls.Themes.OrientationType.Left;
        }

        private bool rightRadioButton_GetChecked()
        {
            return themedTabDeck1.Orientation == UpdateControls.Themes.OrientationType.Right;
        }

        private bool bottomRadioButton_GetChecked()
        {
            return themedTabDeck1.Orientation == UpdateControls.Themes.OrientationType.Bottom;
        }

        private void topRadioButton_SetChecked()
        {
            themedTabDeck1.Orientation = UpdateControls.Themes.OrientationType.Top;
        }

        private void leftRadioButton_SetChecked()
        {
            themedTabDeck1.Orientation = UpdateControls.Themes.OrientationType.Left;
        }

        private void rightRadioButton_SetChecked()
        {
            themedTabDeck1.Orientation = UpdateControls.Themes.OrientationType.Right;
        }

        private void bottomRadioButton_SetChecked()
        {
            themedTabDeck1.Orientation = UpdateControls.Themes.OrientationType.Bottom;
        }

        private System.Collections.IEnumerable themedTabDeck1_GetItems()
        {
            return Numbers;
        }

        private void themedTabDeck1_SetTabPosition(object tag, int value)
        {
            MoveNumber((int)tag, value);
        }

        private void shuffleButton_Click(object sender, EventArgs e)
        {
            // Put the numbers in a random order.
            _dynNumbers.OnSet();
            List<int> source = new List<int>(_numbers);
            _numbers.Clear();
            Random r = new Random();
            while (source.Count > 0)
            {
                int i = r.Next(source.Count);
                _numbers.Add(source[i]);
                source.RemoveAt(i);
            }
        }

        private void themedTabDeck1_CloseTab(object tag)
        {
            DeleteNumber((int)tag);
        }

        private Control themedTabDeck1_CreateContent(object tag)
        {
            ChildForm childForm = new ChildForm();
            childForm.Item = (int)tag;
            return childForm;
        }

        private Image themedTabDeck1_GetItemImage(object tag)
        {
            int person = (int)tag;
            Image image = new Bitmap(this.Font.Height, this.Font.Height);
            using (Graphics g = Graphics.FromImage(image))
            {
                DrawImage(person, g);
            }
            return image;
        }

        private void DrawImage(int person, Graphics g)
        {
            g.DrawString(person.ToString(), this.Font, _brush, 0, 0);
        }

        protected override void OnHandleDestroyed(EventArgs e)
        {
            _brush.Dispose();
            base.OnHandleDestroyed(e);
        }
    }
}